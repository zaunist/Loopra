name: Release Build

on:
  push:
    tags:
      - '*'

permissions:
  contents: write

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Android APK
            os: ubuntu-latest
            build_cmd: flutter build apk --release
            artifact_name: android-apk
            package_file: android-app.apk
            package_script_bash: |
              set -euo pipefail
              mkdir -p dist
              cp build/app/outputs/flutter-apk/app-release.apk "dist/${PACKAGE_FILE}"
            package_script_pwsh: ""
          - name: Android App Bundle
            os: ubuntu-latest
            build_cmd: flutter build appbundle --release
            artifact_name: android-appbundle
            package_file: android-appbundle.aab
            package_script_bash: |
              set -euo pipefail
              mkdir -p dist
              cp build/app/outputs/bundle/release/app-release.aab "dist/${PACKAGE_FILE}"
            package_script_pwsh: ""
          - name: Web
            os: ubuntu-latest
            build_cmd: flutter build web --release
            artifact_name: web
            package_file: web-build.zip
            package_script_bash: |
              set -euo pipefail
              mkdir -p dist
              cd build/web
              zip -r "../../dist/${PACKAGE_FILE}" .
            package_script_pwsh: ""
          - name: Linux Desktop
            os: ubuntu-latest
            build_cmd: flutter build linux --release
            artifact_name: linux-desktop
            package_file: linux-bundle.tar.gz
            package_script_bash: |
              set -euo pipefail
              mkdir -p dist
              tar -C build/linux/x64/release -czf "dist/${PACKAGE_FILE}" bundle
            package_script_pwsh: ""
            linux_deps: true
            enable_desktop: flutter config --enable-linux-desktop
          - name: Windows Desktop
            os: windows-latest
            build_cmd: flutter build windows --release
            artifact_name: windows-desktop
            package_file: windows-bundle.zip
            package_script_bash: ""
            package_script_pwsh: |
              $dist = Join-Path (Get-Location) 'dist'
              New-Item -ItemType Directory -Path $dist -Force | Out-Null
              Compress-Archive -Path "build/windows/x64/runner/Release/*" -DestinationPath (Join-Path $dist $env:PACKAGE_FILE) -Force
            enable_desktop: flutter config --enable-windows-desktop
          - name: macOS Desktop
            os: macos-latest
            build_cmd: flutter build macos --release
            artifact_name: macos-desktop
            package_file: macos-app.zip
            package_script_bash: |
              set -euo pipefail
              mkdir -p dist
              APP_PATH=$(find build/macos/Build/Products/Release -type d -name "*.app" -print | head -n 1)
              if [ -z "${APP_PATH}" ]; then
                echo "macOS app bundle not found" >&2
                exit 1
              fi
              ditto -c -k --keepParent "${APP_PATH}" "dist/${PACKAGE_FILE}"
            package_script_pwsh: ""
            enable_desktop: flutter config --enable-macos-desktop
          - name: iOS
            os: macos-latest
            build_cmd: flutter build ios --release --no-codesign
            artifact_name: ios
            package_file: ios-app.zip
            package_script_bash: |
              set -euo pipefail
              mkdir -p dist
              APP_PATH=$(find build/ios/iphoneos -type d -name "*.app" -print | head -n 1)
              if [ -z "${APP_PATH}" ]; then
                echo "iOS app bundle not found" >&2
                exit 1
              fi
              ditto -c -k --keepParent "${APP_PATH}" "dist/${PACKAGE_FILE}"
            package_script_pwsh: ""

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Show Flutter version
        run: flutter --version

      - name: Enable desktop target
        if: ${{ matrix.enable_desktop }}
        run: ${{ matrix.enable_desktop }}

      - name: Install Linux desktop dependencies
        if: ${{ matrix.linux_deps }}
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev

      - name: Fetch packages
        run: flutter pub get

      - name: Build ${{ matrix.name }}
        run: ${{ matrix.build_cmd }}

      - name: Package ${{ matrix.name }} (Unix)
        if: runner.os != 'Windows'
        run: ${{ matrix.package_script_bash }}
        shell: bash
        env:
          PACKAGE_FILE: ${{ matrix.package_file }}
          TAG_NAME: ${{ github.ref_name }}

      - name: Package ${{ matrix.name }} (Windows)
        if: runner.os == 'Windows'
        run: ${{ matrix.package_script_pwsh }}
        shell: pwsh
        env:
          PACKAGE_FILE: ${{ matrix.package_file }}
          TAG_NAME: ${{ github.ref_name }}

      - name: Upload ${{ matrix.name }} artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: dist/${{ matrix.package_file }}

  publish:
    name: Publish Release Assets
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: List artifacts
        run: ls -R dist

      - name: Generate changelog
        run: |
          set -euo pipefail
          TAG_NAME="${GITHUB_REF_NAME}"
          git fetch --tags --force
          if git rev-parse "${TAG_NAME}^" >/dev/null 2>&1; then
            PREVIOUS_TAG=$(git describe --tags --abbrev=0 "${TAG_NAME}^" 2>/dev/null || true)
          else
            PREVIOUS_TAG=""
          fi

          {
            echo "# ${TAG_NAME}"
            echo
            if [ -n "${PREVIOUS_TAG}" ]; then
              echo "Changes since ${PREVIOUS_TAG}:"
            else
              echo "Changes:"
            fi
            echo
          } > changelog.md

          COMMITS_FILE=$(mktemp)
          if [ -n "${PREVIOUS_TAG}" ]; then
            git log "${PREVIOUS_TAG}..${TAG_NAME}" --pretty=format:'- %an: %s' --no-merges > "${COMMITS_FILE}"
          else
            git log "${TAG_NAME}" --pretty=format:'- %an: %s' --no-merges > "${COMMITS_FILE}"
          fi

          if [ ! -s "${COMMITS_FILE}" ]; then
            echo "- No commits found." >> changelog.md
          else
            cat "${COMMITS_FILE}" >> changelog.md
          fi

          rm "${COMMITS_FILE}"
          echo >> changelog.md

      - name: Publish GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: ${{ github.ref_name }}
        run: |
          set -euo pipefail
          shopt -s nullglob
          ASSETS=(dist/*)
          if [ ${#ASSETS[@]} -eq 0 ]; then
            echo "No build artifacts found in dist" >&2
            exit 1
          fi

          RELEASE_TITLE="Release ${TAG_NAME}"

          if gh release view "${TAG_NAME}" >/dev/null 2>&1; then
            gh release edit "${TAG_NAME}" --title "${RELEASE_TITLE}" --notes-file changelog.md
            gh release upload "${TAG_NAME}" "${ASSETS[@]}" --clobber
          else
            gh release create "${TAG_NAME}" "${ASSETS[@]}" --title "${RELEASE_TITLE}" --notes-file changelog.md --latest
          fi
